---
import Layout from '../layouts/layout.astro'
import FormPreview from '../components/FormPreview.astro'

type StatusKey = 'ready' | 'beta' | 'soon'

const statusStyles: Record<StatusKey, { label: string; badgeClass: string }> = {
	ready: {
		label: 'Ready',
		badgeClass: 'border-indigo-500/40 bg-indigo-500/15 text-indigo-200',
	},
	beta: {
		label: 'Beta',
		badgeClass: 'border-amber-400/40 bg-amber-400/15 text-amber-200',
	},
	soon: {
		label: 'Soon',
		badgeClass: 'border-slate-600 bg-slate-800 text-slate-300',
	},
}

const componentEntries = [
	{
		"name": "Form",
		"slug": "form",
		"githubUrl": "https://github.com/nuasite/nua/packages/components/form/index.astro",
		"tagline": "Progressive enhancement with zero cruft.",
		"description": "Wrap any HTML form in our progressive enhancement layer to get spam protection, resilient fetch submissions, and friendly status messaging out of the box.",
		"status": "ready",
		"order": 1,
		"highlights": [
			"Honeypot field is generated automatically to discourage bots.",
			"Graceful async submission with loading, success, and error banners.",
			"No imposed styles â€” compose layouts with your own Tailwind utilities."
		],
		"props": [
			{
				"name": "formId",
				"required": true,
				"description": "Unique identifier used to wire the client widget to your _nua endpoint and status messages."
			},
			{
				"name": "action",
				"description": "Override the default `/_nua/form/{formId}` endpoint when you need a custom backend."
			},
			{
				"name": "successMessage",
				"description": "Message shown when the submission succeeds. Defaults to \"Success!\"."
			},
			{
				"name": "errorMessage",
				"description": "Message shown when the submission fails. Defaults to \"Something went wrong!\"."
			},
			{
				"name": "submittingMessage",
				"description": "Message shown when the submission is in progress. Defaults to \"Submitting...\"."
			},
			{
				"name": "networkErrorMessage",
				"description": "Message shown when the submission fails due to a network error. Defaults to \"Network error!\"."
			},
			{
				"name": "tryAgainMessage",
				"description": "Message shown when the user can try submitting again. Defaults to \"Try again\"."
			}
		]
	}
]


const components = componentEntries
	.sort((a, b) => (a.order ?? 0) - (b.order ?? 0))
	.map(data => {
		const statusKey = (data.status ?? 'ready') as StatusKey
		const status = statusStyles[statusKey] ?? statusStyles.ready

		return {
			...data,
			statusLabel: status.label,
			statusClass: status.badgeClass,
		}
	})

const upcomingComponents = [
	{
		name: 'Toast',
		description: 'Snack-bar notifications with stacked layouts, focus return, and auto-dismiss timers.',
	},
	{
		name: 'Modal',
		description: 'Accessible dialog with focus trapping and scroll locking handled for you.',
	},
	{
		name: 'Tabs',
		description: 'ARIA-compliant tab interface with keyboard navigation baked in.',
	},
]
---

<Layout title="Playground | Nua Site">
	<main class="min-h-screen bg-slate-950 text-slate-100">
		<section class="relative isolate overflow-hidden bg-linear-to-b from-slate-950 via-slate-900 to-slate-950">
			<div class="pointer-events-none absolute -left-32 -top-[180px] h-72 w-72 rounded-full bg-indigo-500/10 blur-3xl"></div>
			<div class="pointer-events-none absolute -right-24 -bottom-40 h-72 w-72 rounded-full bg-purple-500/10 blur-3xl"></div>

			<div class="mx-auto flex max-w-6xl flex-col gap-8 px-6 pb-20 pt-24 sm:gap-10 sm:pb-24 sm:pt-28">
				<span class="inline-flex w-fit items-center gap-2 rounded-full border border-indigo-400/30 bg-indigo-500/10 px-3 py-1 text-xs font-semibold uppercase tracking-[0.3em] text-indigo-200">
					Playground
				</span>
				<div class="max-w-3xl space-y-6">
					<h1 class="text-4xl font-semibold leading-tight text-slate-50 sm:text-5xl">
						Explore Nua components.
					</h1>
					<p class="text-lg text-slate-300">
						A growing showcase of composable pieces built for product teams that value speed, accessibility, and a refined developer experience. Mix, match, and copy the patterns you need.
					</p>
				</div>
				<div class="flex flex-wrap items-center gap-4 text-sm text-slate-400">
					<div class="flex items-center gap-2">
						<span class="flex h-6 w-6 items-center justify-center rounded-full bg-indigo-500/20 text-indigo-200">1</span>
						<span>Production-ready component available today.</span>
					</div>
					<div class="flex items-center gap-2">
						<span class="flex h-6 w-6 items-center justify-center rounded-full border border-slate-700 bg-slate-900 text-slate-400">
							+
						</span>
						<span>More drops coming every cycle.</span>
					</div>
				</div>
			</div>
		</section>

		<section class="mx-auto grid max-w-6xl gap-10 px-6 py-16 lg:grid-cols-[320px,1fr]">
			<aside class="space-y-6">
				<div>
					<p class="text-xs font-semibold uppercase tracking-[0.4em] text-slate-500">Components</p>
					<p class="mt-2 text-sm text-slate-400">
						Pick a component to view live examples, implementation details, and ready-to-use snippets.
					</p>
				</div>

				<nav class="space-y-2">
					{components.map((component, index) => (
						<a
							href={`#${component.slug}`}
							class="group flex items-center gap-4 rounded-2xl border border-slate-800 bg-slate-900/60 px-4 py-3 transition hover:border-indigo-400 hover:bg-slate-900"
						>
							<span class="flex h-9 w-9 items-center justify-center rounded-xl bg-indigo-500/10 text-sm font-semibold text-indigo-200">
								{String(index + 1).padStart(2, '0')}
							</span>
							<div class="space-y-1">
								<p class="text-sm font-semibold text-slate-100 group-hover:text-white">
									{component.name}
								</p>
								<p class="text-xs text-slate-400 group-hover:text-slate-300">{component.tagline}</p>
							</div>
						</a>
					))}
				</nav>
			</aside>

			<div class="space-y-12">
				{components.map((component) => (
					<article
						id={component.slug}
						class="rounded-3xl border border-slate-800 bg-slate-900/60 shadow-xl shadow-black/20"
					>
						<header class="border-b border-slate-800 px-8 py-8">
							<div class="flex flex-col gap-6 sm:flex-row sm:items-end sm:justify-between">
								<div class="space-y-3">
									<h2 class="text-3xl font-semibold text-white">{component.name}</h2>
									<p class="max-w-2xl text-sm text-slate-300">{component.description}</p>
								</div>
								<div class="flex gap-3 items-center">
									<span class={`inline-flex items-center gap-2 rounded-full border px-3 py-1 text-xs font-semibold uppercase tracking-[0.4em] ${component.statusClass}`}>
										{component.statusLabel}
									</span>
									{component.status === 'ready' && (
										<a
											href={component.githubUrl}
											target="_blank"
											rel="noopener noreferrer"
											class="inline-flex items-center gap-2 rounded-lg border border-slate-700 bg-slate-800 px-3 py-2 text-xs font-medium text-slate-300 transition hover:border-slate-600 hover:bg-slate-700 hover:text-slate-200"
										>
											<svg aria-hidden="true" class="h-4 w-4" fill="currentColor" viewBox="0 0 24 24">
												<path fill-rule="evenodd" d="M12 2C6.477 2 2 6.484 2 12.017c0 4.425 2.865 8.18 6.839 9.504.5.092.682-.217.682-.483 0-.237-.008-.868-.013-1.703-2.782.605-3.369-1.343-3.369-1.343-.454-1.158-1.11-1.466-1.11-1.466-.908-.62.069-.608.069-.608 1.003.07 1.531 1.032 1.531 1.032.892 1.53 2.341 1.088 2.91.832.092-.647.35-1.088.636-1.338-2.22-.253-4.555-1.113-4.555-4.951 0-1.093.39-1.988 1.029-2.688-.103-.253-.446-1.272.098-2.65 0 0 .84-.27 2.75 1.026A9.564 9.564 0 0112 6.844c.85.004 1.705.115 2.504.337 1.909-1.296 2.747-1.027 2.747-1.027.546 1.379.202 2.398.1 2.651.64.7 1.028 1.595 1.028 2.688 0 3.848-2.339 4.695-4.566 4.943.359.309.678.92.678 1.855 0 1.338-.012 2.419-.012 2.747 0 .268.18.58.688.482A10.019 10.019 0 0022 12.017C22 6.484 17.522 2 12 2z" clip-rule="evenodd" />
											</svg>
											View on GitHub
										</a>
									)}
								</div>
							</div>
						</header>

						<div class="grid gap-10 px-8 py-10 lg:grid-cols-2">
							<section class="space-y-6">
								<div class="flex items-center justify-between">
									<h3 class="text-sm font-semibold uppercase tracking-[0.3em] text-slate-400">Live preview</h3>
								</div>

								<div class="rounded-2xl border border-slate-800 bg-slate-950/70 p-6 shadow-inner">
									{component.slug === 'form' ? (
										<FormPreview />
									) : (
										<div class="flex h-full min-h-[220px] items-center justify-center rounded-xl border border-dashed border-slate-800 bg-slate-950/60 px-6 py-12 text-center text-sm text-slate-500">
											Preview coming soon.
										</div>
									)}
								</div>
							</section>

							<section class="space-y-8">
								{component.highlights.length ? (
									<div>
										<h3 class="text-sm font-semibold uppercase tracking-[0.3em] text-slate-400">
											Highlights
										</h3>
										<ul class="mt-4 space-y-3 text-sm text-slate-300">
											{component.highlights.map((highlight) => (
												<li class="flex items-start gap-3">
													<span class="mt-0.5 flex h-5 w-5 items-center justify-center rounded-full bg-indigo-500/20 text-indigo-200">
														<svg aria-hidden="true" class="h-3 w-3" fill="none" viewBox="0 0 16 16">
															<path d="M4 8.5L6.5 11 12 5.5" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="1.5" />
														</svg>
													</span>
													<span>{highlight}</span>
												</li>
											))}
										</ul>
									</div>
								) : null}

								{component.props.length ? (
									<div class="rounded-2xl border border-slate-800 bg-slate-950/60">
										<div class="border-b border-slate-800 px-5 py-4">
											<h3 class="text-xs font-semibold uppercase tracking-[0.3em] text-slate-400">
												Props
											</h3>
										</div>
										<dl class="divide-y divide-slate-800">
											{component.props.map((prop) => (
												<div class="grid gap-3 px-5 py-4 sm:grid-cols-[160px,1fr]" role="presentation">
													<dt class="text-sm font-semibold text-slate-100">
														{prop.name}
														{prop.required ? (
															<span class="ml-2 rounded-full border border-indigo-400/40 bg-indigo-500/10 px-2 py-0.5 text-[10px] font-semibold uppercase tracking-widest text-indigo-200">
																Required
															</span>
														) : null}
													</dt>
													<dd class="text-sm text-slate-300">{prop.description}</dd>
												</div>
											))}
										</dl>
									</div>
								) : null}
							</section>
						</div>
					</article>
				))}
			</div>
		</section>

		<section class="mx-auto max-w-6xl px-6 pb-24">
			<div class="rounded-3xl border border-slate-800 bg-slate-900/60 px-8 py-10">
				<div class="flex flex-col gap-6 sm:flex-row sm:items-center sm:justify-between">
					<div>
						<h2 class="text-2xl font-semibold text-white">Up next</h2>
						<p class="mt-2 max-w-2xl text-sm text-slate-300">
							We are shipping focused drops of reusable UI and data flows. Hereâ€™s a peek at whatâ€™s cooking.
						</p>
					</div>
					<span class="inline-flex items-center gap-2 rounded-full border border-slate-700 bg-slate-950/80 px-4 py-2 text-xs font-semibold uppercase tracking-[0.4em] text-slate-400">
						Sneak peek
					</span>
				</div>

				<div class="mt-8 grid gap-6 md:grid-cols-3">
					{upcomingComponents.map((component) => (
						<div class="rounded-2xl border border-slate-800 bg-slate-950/70 p-6">
							<p class="text-sm font-semibold text-white">{component.name}</p>
							<p class="mt-2 text-sm text-slate-400">{component.description}</p>
						</div>
					))}
				</div>
			</div>
		</section>
	</main>
</Layout>
